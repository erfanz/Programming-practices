syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";
option objc_class_prefix = "RTG";

package routeguide;



// Interface exported by the server
service RouteGuide {
	// you define RPC methods inside your service definition
	
	// A "Simple" RPC
	// Obtains the feature at a given position.
	rpc GetFeature(Point) returns (Feature) {}
	
	// A "Server-to-client streaming" RPC
	// Obtains the Features available within the given Rectangle. Results are
	// streamed rather than returned at once, as rectangle may cover a large
	// area and contain a huge number of features. 
	rpc ListFeatures(Rectangle) returns (stream Feature) {}
	
	// A "Client-to-server streaming" RPC
	// Accepts a stream of Points on a route being traversed, returning a
	// Route Summary when traversal is completed.
	rpc RecordRoute(stream Point) returns (RouteSummary){}
	
	// A "Bidirectional streaming" RPC
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	rpc RouteChat(stream RouteNote) returns (stream RouteNote){}
}

message Point {
	int32 latitude = 1;
	int32 longitude = 2;
}

message Rectangle {
	Point lo = 1;
	Point hi = 2;
}

// A feature names something at a given point
message Feature {
	string name = 1;
	Point location = 2;
}

// A RouteNote is a message sent while at a given Point
message RouteNote {
	Point location = 1;
	string message = 2;
}

// A RouteSummary contains the number of individual points received, 
// the number of detected features, and the total distance covered
message RouteSummary {
	int32 point_count = 1;
	int32 feature_count = 2;
	int32 distance = 3;
	int32 elapsed_time = 4; 
}
